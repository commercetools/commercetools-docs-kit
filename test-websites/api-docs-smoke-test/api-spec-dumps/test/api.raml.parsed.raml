#%RAML 1.0
title: Commercetools Test API Spec
version: v0.1 beta
mediaType: application/json
baseUri: https://subdomain-{exampleUriParameter}.example.com
baseUriParameters:
  exampleUriParameter:
    enum:
      - subdomainOne
      - subdomainTwo
      - subdomainThree
    description: |
      Free text description of the uri parameter.
securitySchemes:
  oauth_2_0:
    description: |
      Subset of allowable CT OAuth scopes for testing purposes.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
            On successful completion of an authorization flow,
            a client will be given an `access_token`, which they need to include in requests
            to authorized service endpoints via the HTTP `Authorization` header like this:
            Authorization: Bearer {access_token}
          type: string
      responses:
        "401":
          description: Unauthorized
    settings:
      accessTokenUri: https://subdomain-auth.example.com/oauth/{projectKey}/anonymous/token
      authorizationGrants:
        - client_credentials
        - password
      scopes:
        - manage_test:{projectKey}
        - view_test:{projectKey}
securedBy:
  - oauth_2_0
types:
  IntegerTestType:
    description: This is a type which contains test data for Integer properties.
    properties:
      integerExample:
        type: integer
        description: Description Text of that [integer value](http://google.com) including rendered **markdown**.
        default: 1
        minimum: 0
        maximum: 64650
        required: true
      integerExampleInt32:
        type: number
        format: int32
        description: Tests an int32.
  FloatTestType:
    description: This is a type which contains test data for Float properties.
    properties:
      floatExample:
        type: number
        format: float
        description: _Description Text_ including rendered markdown.
        default: 1.5
        minimum: 0.1
        maximum: 2.23
        required: true
  NumberTestType:
    description: Tests JSON type "number",
    properties:
      numberExample:
        type: number
        required: true
  StringTestType:
    description: This is a type which contains test data for string properties.
    properties:
      stringExample:
        type: string
        default: "0"
        description: Description Text including rendered *markdown*.
        minLength: 1
        maxLength: 70909
        pattern: "[0-9|-]+"
        required: true
  RegexPropertiesType:
    description: This is a type that can have arbitrary properties as long as they match a certain expression
    type: object
    properties:
      /^[a-z]{2}(-[A-Z]{2})?$/?:
        type: string
  AnyPropertiesType:
    description: This is a type that can have arbitrary properties
    type: object
    properties:
      //?:
        type: string
  BooleanTestType:
    properties:
      booleanExample:
        type: boolean
        description: Description text including rendered `markdown`.
        default: true
  DateTestType:
    description: Test data for the RAML date formats.
    properties:
      dateOnlyExample:
        description: to be shown as "Date"
        type: date-only
        example: 2015-05-23
      timeOnlyExample:
        description: to be shown as "Time"
        type: time-only
        example: 12:30:00
      dateTimeOnlyExample:
        description: To be shown as "DateTimeOnly". We do not recommend this format.
        type: datetime-only
        example: 2015-07-04T21:00:00
      dateTimeExample:
        description: rfc3339 format explicitly set. To be shown as "DateTime"
        type: datetime
        format: rfc3339
        example: 2016-02-28T16:41:41.090Z
      dateTimeExampleDefaultFormat:
        description: format not set, rfc3339 is default, so this is also shown as "DateTime"
        type: datetime
        example: 2016-02-28T16:41:41.090Z
      dateTimeExampleRfc:
        description: To be shown as "DateTimeRfc2616". Not a recommended format.
        type: datetime
        format: rfc2616
        example: Sun, 28 Feb 2016 16:41:41 GMT
  ObjectTestType:
    description: A typical Object type with a non-scalar property.
    properties:
      version:
        type: integer
      objectTypeProperty:
        type: ArrayTestType
  ObjectTestTypeDraft:
    description: A type to create an ObjectTestType. Used for testing the endpoint layout.
    properties:
      objectTypeProperty:
        type: ArrayTestType
  AnyTestType:
    description: Tests acceptance of JSON blobs.
    properties:
      anyTypeExample:
        description: A test of type "any", i.e. any JSON allowed here. To be displayed as "any JSON".
        type: any
  EnumTest:
    description: Example enumeration for the SetOfEnumTestTypes type.
    type: string
    enum:
      - EnumEntryOne
      - EnumEntryTwo
      - EnumEntryThree
  EnumPropertiesType:
    description: Test data for properties with enums that are of differing primitive types
    properties:
      intWithEnumExample:
        description: An int with enum values
        type: number
        enum:
          - 1
          - 2
          - 3
      floatWithEnumExample:
        description: A float with enum values
        type: number
        format: float
        default: 1.0
        enum:
          - 1.0
          - 2.0
          - 3.0
      enumOfStringExample:
        description: A string with enum values (undescribed)
        type: string
        enum:
          - dog
          - cat
          - elephant
  SetOfEnumTestType:
    description: A type containing a property with a set of Enums
    properties:
      setofEnumExample:
        description: |
          Contains a Set of `EnumTest`. If `uniqueItems` is `true` for an Array,
          the then instead of "Array of ______", it needs to read "Set of _______".
        type:
          items: EnumTest
        uniqueItems: true
  EnumWithDescriptionExample:
    description: Enum with agreed upon description annotation.
    type: string
    (enumDescriptions):
      value1: description 1
      value2: description 2
      value3: description 3
    enum:
      - value1
      - value2
      - value3
  ArrayTestType:
    description: A type containing arrays of different kinds.
    properties:
      arrayOfIntExample:
        description: A property with an array of ints. JSON primitive is `array`, display type is "Array of Int".
        type:
          items:
            type: integer
        minItems: 1
        uniqueItems: false
      arrayOfUniqueIntExample:
        description: A property with an array of ints in which items must be unique. JSON primitive is `array`, display type is "Array of Int"
        type:
          items:
            type: integer
        minItems: 1
        uniqueItems: true
      arrayOfTwonumbersExample:
        type:
          items:
            type: integer
        minItems: 2
        maxItems: 2
      arrayOfFloatExample:
        description: An array of float. JSON primitive is `array`, display type is "Array of Float". !!! Until underlying libraries are fixed, this displays "Array of Number" because the pattern information is lost.
        type: array
        minItems: 1
        maxItems: 1
        uniqueItems: false
        items:
          type: number
          format: float
      arrayOfNumberNoDefaultsExample:
        description: An array of float. JSON primitive is `array`, display type is "Array of Number"
        type:
          items:
            type: number
      arrayOfStringExample:
        description: An array of strings. JSON primitive is `array`, display type is "Array of String"
        type:
          items:
            type: string
        uniqueItems: false
      arrayOfObjectType:
        description: An array of IntegerTestType. JSON primitive is `array`, display type is "Array of IntegerTestType"
        type:
          items: IntegerTestType
        uniqueItems: false
  UnionLikeType:
    description: |
      A pattern of inheritance that is to be represented like a union, i.e. this parent type would not be shown with a property list on its own.
    type: object
    discriminator: kind
    properties:
      kind:
        type: string
  UnionLikeSubType1:
    description: This specific instance of the union is rendered like a regular type with a property table
    type: UnionLikeType
    discriminatorValue: subtype1
    properties:
      foo:
        type: string
      name:
        type: string
  UnionLikeSubType2:
    description: This specific instance of the union is rendered like a regular type with a property table
    type: UnionLikeType
    discriminatorValue: subtype2
    properties:
      bar:
        type: string
      name:
        type: string
  ConstantLikeType:
    type: string
    description: render an enum with one value as a constant.
    enum:
      - constantExampleValue
  OptionalPropertyTestType:
    description: Example of optional/non-optional properties.
    properties:
      requiredTrueExample:
        type: string
        description: this should be required.
        required: true
      requiredNotSetExample:
        type: string
        description: this should default to required = true.
      requiredFalseExample:
        type: string
        required: false
  OutOfOrderPropertiesTestType:
    description: |
      Tests out of order properties. By convention, `id`, `key`, `version`, `createdAt`,
      `createdBy`, `lastModifiedAt` and `lastModifiedBy` should display at the top (in that order).
      `custom` should display at the bottom. All other properties should render in the order they
      appear.
      Some types will not have all of the 'conventional' properties – i.e. cart doesn't have a key field.
      In this case, ordering would go `id`, `version`... etc.
    properties:
      eigthProperty:
        type: string
        description: Should display 8th (1st in RAML)
      createdBy:
        type: object
        (beta): true
        description: Should display 5th (2nd in RAML)
      ninthProperty:
        type: string
        description: Should display 9th (3rd in RAML)
      key:
        type: string
        description: Should display 2nd (4th in RAML)
      tenthProperty:
        type: string
        description: Should display 10th (5th in RAML)
      custom:
        type: string
        description: Should display last (6th in RAML)
      eleventhPropery:
        type: string
        description: Should display 11th (7th in RAML)
      id:
        type: string
        description: Should display 1st (8th in RAML)
      twelthProperty:
        type: string
        description: Should display 12th (9th in RAML)
      lastModifiedBy:
        type: object
        (beta): true
        description: Should display 7th (10th in RAML)
      thirteenthProperty:
        type: string
        description: Should display 13th (11th in RAML)
      lastModifiedAt:
        type: datetime
        description: Should display 6th (12th in RAML)
      fourteenthProperty:
        type: string
        description: Should display 14th (13th in RAML)
      fifteenthProperty:
        type: string
        description: Should display 15th (14th in definition)
      createdAt:
        type: datetime
        description: Should display 4th (15th in RAML)
  ExampleTargetType:
    description: empty target object type, just here to be able to point to it.
  ReferenceTypeId:
    description: |
      The allowed typeIds of the referenced resource.
    type: string
    enum:
      - example-target
      - cart-discount
      - category
      - channel
      - customer
      - customer-group
      - price
      - product
      - product-type
      - product-variant
      - shipping-method
      - state
      - tax-category
    (enumDescriptions):
      example-target: References an ExampleTargetType.
      cart-discount: References a cart discount.
      category: References a category.
      channel: References a channel.
      customer: References a customer.
      customer-group: References a customer group.
      price: References a price.
      product: References a product.
      product-type: References a product type.
      product-variant: References a product variant.
      shipping-method: References a shipping method.
      state: References a state.
      tax-category: References a tax-category.
  ResourceIdentifier:
    type: object
    discriminator: typeId
    properties:
      typeId:
        type: ReferenceTypeId
        required: false
      id:
        type: string
        required: false
      key:
        type: string
        required: false
  Reference:
    type: object
    discriminator: typeId
    properties:
      typeId:
        type: ReferenceTypeId
      id:
        type: string
      obj:
        type: any
        required: false
  KeyReference:
    type: object
    discriminator: typeId
    properties:
      typeId:
        type: ReferenceTypeId
      key:
        type: string
  ExampleTargetTypeReference:
    type: Reference
    displayName: Reference
    (refersTo): ExampleTargetType
    discriminatorValue: example-target
    properties:
      obj:
        type: IntegerTestType
  ExampleTargetTypeKeyReference:
    type: KeyReference
    displayName: KeyReference
    (refersTo): ExampleTargetType
    discriminatorValue: example-target
  ExampleTargetTypeResourceIdentifier:
    type: ResourceIdentifier
    displayName: ResourceIdentifier
    (refersTo): ExampleTargetType
    discriminatorValue: example-target
  ExampleTargetTypePointer:
    displayName: String
    type: string
    (refersTo): ExampleTargetType
  ReferencesTestType:
    description: Example for various sorts of References
    properties:
      exampleTargetId:
        type: ExampleTargetTypePointer
        description: |
          A kind of reference that is not an object but directly the ID.
          To be rendered as "String, refers to ExampleTargetType"
          with "ExampleTargetType" being a link.
      exampleTarget:
        type: ExampleTargetTypeReference
        description: |
          Type should be rendered as "Reference, refers to ExampleTargetType"
          with "Reference" and the "ExampleTargetType" being links.
      exampleTargets:
        type:
          items: ExampleTargetTypeReference
        description: |
          Type should be rendered as "Array of References, refers to ExampleTargetType"
          with "References" and "ExampleTargetType" being links.
      exampleTargetIdentifier:
        type: ExampleTargetTypeResourceIdentifier
        description: |
          Type should be rendered as "ResourceIdentifier, refers to ExampleTargetType"
          with "ResourceIdentifier" and "ExampleTargetType" being links.
      exampleTargetIdentifiers:
        type:
          items: ExampleTargetTypeResourceIdentifier
        description: |
          Type should be rendered as "Array of ResourceIdentifiers, refers to ExampleTargetType"
          with "ResourceIdentifiers" and "ExampleTargetType" being links.
      exampleTargetByKey:
        type: ExampleTargetTypeKeyReference
        description: |
          Type should be rendered as "KeyReference, refers to ExampleTargetType"
          with "KeyReference" and "ExampleTargetType" being links.
      exampleTargetsByKey:
        type:
          items: ExampleTargetTypeKeyReference
        description: |
          Type should be rendered as "Array of KeyReferences, refers to ExampleTargetType"
          with "KeyReferences" and "ExampleTargetType" being links.
  AnnotationsTestType:
    properties:
      isBetaType:
        description: Beta property. If true, a "beta" flag should appear beside the type name.
        type: string
        (beta): true
      isDeprecatedType:
        description: Deprecated property. THIS MUST NOT BE RENDERED AT ALL (=hidden in documentation, it just stays there to keep SDKs backwards compatible).
        type: string
        (deprecated): true
  ExamplesTestType:
    properties:
      foo:
        type: string
      baz:
        type: integer
      boo:
        type: boolean
    examples:
      simpleExample:
        glossary:
          title: example glossary
          GlossDiv:
            title: S
            GlossList:
              GlossEntry:
                ID: SGML
                SortAs: SGML
                GlossTerm: Standard Generalized Markup Language
                Acronym: SGML
                Abbrev: ISO 8879:1986
                GlossDef:
                  para: A meta-markup language, used to create markup languages such as DocBook.
                  GlossSeeAlso:
                    - GML
                    - XML
                GlossSee: markup
      fullExample:
        displayName: Full Example
        description: |
          This **markdown** formatted description of the code example is to be shown with it.
          The title of this example must be "Full Example" (displayName overrides the name).
          The JSON contained must be code highlighted because the mime type is set.
        value:
          glossary:
            title: example glossary
            GlossDiv:
              title: S
              GlossList:
                GlossEntry:
                  ID: SGML
                  SortAs: SGML
                  GlossTerm: Standard Generalized Markup Language
                  Acronym: SGML
                  Abbrev: ISO 8879:1986
                  GlossDef:
                    para: A meta-markup language, used to create markup languages such as DocBook.
                    GlossSeeAlso:
                      - GML
                      - XML
                  GlossSee: markup
        strict: false
      fullExampleWithoutLooseningStrict:
        displayName: Full Example with default strict setting
        description: |
          If the "strict" property is not set, the parser could fail but usually doesn't
        value:
          glossary:
            title: example glossary
            GlossDiv:
              title: S
              GlossList:
                GlossEntry:
                  ID: SGML
                  SortAs: SGML
                  GlossTerm: Standard Generalized Markup Language
                  Acronym: SGML
                  Abbrev: ISO 8879:1986
                  GlossDef:
                    para: A meta-markup language, used to create markup languages such as DocBook.
                    GlossSeeAlso:
                      - GML
                      - XML
                  GlossSee: markup
      fullExampleInRamlNotation:
        displayName: Example in RAML notation
        description: |
          We're not typically doing this but it should not fail. It places an object in RAML/YAML notation
          in the tree. The parser's default output serializes it to JSON, which is another pointer that JSON _is_ the
          default assumption.
        value:
          foo: bar
          baz: 100
          boo: false
        strict: true
  SingleExampleTestType:
    example: |
      {
        "glossary": {
          "title": "example glossary",
          "GlossDiv": {
            "title": "S",
            "GlossList": {
              "GlossEntry": {
                "ID": "SGML",
                "SortAs": "SGML",
                "GlossTerm": "Standard Generalized Markup Language",
                "Acronym": "SGML",
                "Abbrev": "ISO 8879:1986",
                "GlossDef": {
                  "para": "A meta-markup language, used to create markup languages such as DocBook.",
                  "GlossSeeAlso": ["GML", "XML"]
                },
                "GlossSee": "markup"
              }
            }
          }
        }
      }
  SingleFullExampleTestType:
    example:
      displayName: Full Example
      description: |
        This **markdown** formatted description of the code example is to be shown with it.
        The title of this example must be "Full Example" (displayName overrides the name).
        The JSON contained must be code highlighted because the mime type is set.
      value: |
        {
          "glossary": {
            "title": "example glossary",
            "GlossDiv": {
              "title": "S",
              "GlossList": {
                "GlossEntry": {
                  "ID": "SGML",
                  "SortAs": "SGML",
                  "GlossTerm": "Standard Generalized Markup Language",
                  "Acronym": "SGML",
                  "Abbrev": "ISO 8879:1986",
                  "GlossDef": {
                    "para": "A meta-markup language, used to create markup languages such as DocBook.",
                    "GlossSeeAlso": ["GML", "XML"]
                  },
                  "GlossSee": "markup"
                }
              }
            }
          }
        }
      strict: false
  ExampleResourceUpdate:
    properties:
      version:
        type: number
        description: |
          The expected version of the ExampleResource on which the changes should be applied.
          If the expected version does not match the actual version, a 409 Conflict will be returned.
      actions:
        type: array
        description: |
          The list of update actions to be performed on the ExampleResource.
          Actions are applied in the given order.
        items: ExampleResourceUpdateAction
  ExampleResourceUpdateAction:
    discriminator: action
    properties:
      action:
        type: string
  DoSomeThingOnExampleResource:
    displayName: Do SomeThing
    type: ExampleResourceUpdateAction
    discriminatorValue: doSomeThing
  ChangeSomePropertyOnExampleResource:
    type: ExampleResourceUpdateAction
    displayName: Change SomeProperty
    discriminatorValue: changeSomeProperty
    properties:
      someProperty:
        type: string
