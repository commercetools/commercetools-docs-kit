#%RAML 1.0
---
title: Commercetools Test API Spec
version: v0.1 beta
mediaType: application/json
baseUri: https://subdomain-{exampleUriParameter}.example.com
baseUriParameters:
  exampleUriParameter:
    enum:
      - subdomainOne
      - subdomainTwo
      - subdomainThree
    description: |
      Free text description of the uri parameter.
securitySchemes:
  oauth_2_0: !include security-schemes/oauth2.raml
securedBy: [ oauth_2_0 ]


# This API represents a series of test cases from which to generate API documentation

uses:
  annotations: annotation-types/annotations.raml
  annotations-test-type: types/annotations-test-type.raml
  any-properties-type: types/any-properties-type.raml
  any-test-type: types/any-test-type.raml
  arrays: types/arrays.raml
  constant-like-type: types/constant-like-type.raml
  date-test-type: types/date-test-type.raml
  enums: types/enums.raml
  examples: types/examples.raml
  objects: types/objects.raml
  optional-property-test-type: types/optional-property-test-type.raml
  out-of-order-properties-test-type: types/out-of-order-properties-test-type.raml
  references: types/references.raml
  regex-properties-type: types/regex-properties-type.raml
  scalars: types/scalars.raml
  unions: types/unions.raml

# Endpoints ("Resources" in RAML and HTTP terminology)
# Every CT API endpoint starts at this root
/{projectKey}:
  uriParameters:
    projectKey:
      description: The CTP project key.
      type: string
  /resource:
    post:
      displayName: Create a Resource
      description: Create (POST) operation to a resource.
      securedBy:
        - oauth_2_0:
            scopes: ["manage_test:{projectKey}"]
      body:
        type: objects.ObjectTestTypeDraft
        example: !include examples/object-test-type-draft.json
      responses:
        201:
          description: 201 Created response. This is the success response when creating something.
          body:
            type: objects.ObjectTestType
            example: !include examples/object-test-type.json
    get:
      displayName: Get all resources
      description: Query/retrieve (GET) a specific resource or resource(s). This should return a paged query result of _blah_.
      queryParameters:
        where:
          type: string
          required: false
        sort:
          type: string
          required: false
        expand:
          type: string
          required: false
        limit:
          type: number
          required: false
        offset:
          type: number
          required: false
        collection:
          type: objects.ObjectTestType
          required: false
      securedBy:
      - oauth_2_0:
          scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]
      responses:
          200:
            description: A 200 response.  This is the case when reading or modifying something.
            body:
              type: arrays.ArrayTestType
              example: !include examples/array-test-type.json
    /{id}:
      post:
        displayName: Update a Resource by ID
        description: Update a resource by ID
        body:
          type: examples.ExampleResourceUpdate
      get:
        displayName: Get a Resource by its ID
        description: Query by ID
        securedBy:
          - oauth_2_0:
              scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]
        queryParameters:
          optionalQueryParameter:
            required: false
            type: string
            description: |
              This is a query parameter.
          secondOptionalQueryParameter:
            required: false
            type: string
            description: |
              This is another query parameter.
        responses:
          200:
            body:
              type: objects.ObjectTestType
      delete:
        displayName: Delete a Resource by its ID
        description: Deletes a resource.
        securedBy:
          - oauth_2_0:
              scopes: ["manage_test:{projectKey}"]
        responses:
          200:
            description: Deletion was successful.
            body:
              type: objects.ObjectTestType
    /key={key}:
      get:
        displayName: Get a Resource by its Key
        description: Query by key. Has three responses to see the difference between modeling patterns in RAML
        securedBy: [oauth_2_0: {scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]}]
        responses:
          200:
            description: this is directly using a named type without messing with it, thats how we want to use RAML
            body:
              type: objects.ObjectTestType
          502:
            body:
              type: scalars.StringTestType

    /artificially-complex/path/uri-parameter-one={uriParameterOne}/{uriParameterTwo}:
      description: Artificial Endpoint constructing a high complexity of what could theoretically come together in one API
      (annotations.beta): true
      uriParameters:
        uriParameterOne:
          type: string
          description: A Path parameter in the equal-sign-pseudo-query notation
        uriParameterTwo:
          type: string
          description: A Path parameter as a plain variable path element
      post:
        description: Updates the resource. OutOfOrderPropertiesTestType is used because it is big and long.
        queryParameters:
          queryParameterOne:
            type: number
            description: some parameter to construct a combination of URI and query params
            required: false
          queryParameterTwo:
            type: string
            required: false
        body:
          type: out-of-order-properties-test-type.OutOfOrderPropertiesTestType
        responses:
          200:
            description: ArrayTestType is used because it is big and long.
            body:
              type: arrays.ArrayTestType
          202:
            description: |
              DateTestType is used because it is big and long
              This is not used by commercetools but a valid 2xx response that says that it will process the stuff later.
              It's here to check how we handle multiple "OK" style response options.
            body:
              type: date-test-type.DateTestType


    /searchApiPattern:
      get:
        displayName: Search Resources
        description: Search all resources by specific parameters.
        securedBy:
          - oauth_2_0:
              scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]
        queryParameters:
          fuzzy?:
            type: boolean
            description: Whether to apply fuzzy search on the text to analyze.
          fuzzyLevel?:
            type: number
            description: |
              Provide explicitly the fuzzy level desired if fuzzy is enabled. This value can not be higher than the one
              chosen by the platform by default.
          staged?:
            type: boolean
            description: Whether to query for the current or staged projections.
          filter?:
            type: string
          filter.facets?:
            type: string
          filter.query?:
            type: string
          facet?:
            type: string
          /text\.[a-z]{2}(-[A-Z]{2})?/:
            type: string
            required: false


#   /resourceWithHeaders:
#    description: Tests use of specific headers.
