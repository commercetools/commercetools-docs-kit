#%RAML 1.0
---
title: Commercetools Test API Spec
version: v0.1 beta
mediaType: application/json
baseUri: https://subdomain-{exampleUriParameter}.example.com
baseUriParameters:
  exampleUriParameter:
    enum:
      - subdomainOne
      - subdomainTwo
      - subdomainThree
    description: |
      Free text description of the uri parameter.
securitySchemes:
  oauth_2_0:
    description: |
      Subset of allowable CT OAuth scopes for testing purposes.
    type: OAuth 2.0
    describedBy:
      headers:
        Authorization:
          description: |
            On successful completion of an authorization flow,
            a client will be given an `access_token`, which they need to include in requests
            to authorized service endpoints via the HTTP `Authorization` header like this:
            Authorization: Bearer {access_token}
          type: string
      responses:
        401:
          description: Unauthorized
    settings:
      accessTokenUri: https://subdomain-auth.example.com/oauth/{projectKey}/anonymous/token
      authorizationGrants: [ client_credentials, password ]
      scopes:
        - "manage_test:{projectKey}"
        - "view_test:{projectKey}"
securedBy: [ oauth_2_0 ]


# This API represents a series of test cases from which to generate API documentation

types:
  # Scalars
  IntegerTestType:
    description: This is a type which contains test data for Integer properties.
    properties:
      integerExample:
        required: true
        type: integer
        description: Description Text of that [integer value](http://google.com) including rendered **markdown**.
        default: 1
        minimum: 0
        maximum: 64650
      integerExampleInt32:
        type: number
        format: int32
        description: Tests an int32.
  FloatTestType:
    description: This is a type which contains test data for Float properties.
    properties:
      floatExample:
        required: true
        type: number
        # https://github.com/raml-org/raml-spec/blob/master/versions/raml-10/raml-10.md/#number
        format: float
        description: _Description Text_ including rendered markdown.
        default: 1.5
        minimum: 0.1
        maximum: 2.23
  NumberTestType:
    description: Tests JSON type "number",
    properties:
      numberExample:
        required: true
        type: number
  StringTestType:
    description: This is a type which contains test data for string properties.
    properties:
      stringExample:
        required: true
        type: string
        default: "0"
        description: Description Text including rendered *markdown*.
        minLength: 1
        maxLength: 70909
        pattern: "[0-9|-]+"
  RegexPropertiesType:
    description: This is a type that can have arbitrary properties as long as they match a certain expression
    type: object
    properties:
      /^[a-z]{2}(-[A-Z]{2})?$/:
        type: string
  AnyPropertiesType:
    description: This is a type that can have arbitrary properties
    type: object
    properties:
      //:
        type: string

  BooleanTestType:
    properties:
      booleanExample:
        type: boolean
        description: Description text including rendered `markdown`.
        default: true

  # Using RAML's datetime
  DateTestType:
    description: Test data for the RAML date formats.
    properties:
      dateOnlyExample:
        description: to be shown as "Date"
        type: date-only
        example: "2015-05-23"
      timeOnlyExample:
        description: to be shown as "Time"
        type: time-only
        example: "12:30:00"
      dateTimeOnlyExample:
        description: To be shown as "DateTimeOnly". We do not recommend this format.
        type: datetime-only
        example: "2015-07-04T21:00:00"
      dateTimeExample:
        description: rfc3339 format explicitly set. To be shown as "DateTime"
        type: datetime
        format: rfc3339
        example: "2016-02-28T16:41:41.090Z"
      dateTimeExampleDefaultFormat:
        description: format not set, rfc3339 is default, so this is also shown as "DateTime"
        type: datetime
        example: "2016-02-28T16:41:41.090Z"
      dateTimeExampleRfc:
        description: To be shown as "DateTimeRfc2616". Not a recommended format.
        type: datetime
        format: rfc2616
        example: "Sun, 28 Feb 2016 16:41:41 GMT"

  # Objects
  ObjectTestType:
    description: A typical Object type with a non-scalar property.
    properties:
      version:
        type: integer
      objectTypeProperty:
        type: ArrayTestType
  ObjectTestTypeDraft:
    description: A type to create an ObjectTestType. Used for testing the endpoint layout.
    properties:
      objectTypeProperty:
        type: ArrayTestType

  # Any
  AnyTestType:
    description: Tests acceptance of JSON blobs.
    properties:
      anyTypeExample:
        description: A test of type "any", i.e. any JSON allowed here. To be displayed as "any JSON".
        type: any

  # Enums
  EnumTest:
    description: Example enumeration for the SetOfEnumTestTypes type.
    type: string
    enum:
      - EnumEntryOne
      - EnumEntryTwo
      - EnumEntryThree
  EnumPropertiesType:
    description: Test data for properties with enums that are of differing primitive types
    properties:
      intWithEnumExample:
        description: An int with enum values
        type: integer
        enum: [ 1, 2, 3 ]
      floatWithEnumExample:
        description: A float with enum values
        type: number
        format: float
        default: 1.0
        enum: [ 1.0, 2.0, 3.0 ]
      enumOfStringExample:
        description: A string with enum values (undescribed)
        type: string
        enum:
          - "dog"
          - "cat"
          - "elephant"
  SetOfEnumTestType:
    description: A type containing a property with a set of Enums
    # I.e. how `ChannelDraft` has `ChannelRole`s
    properties:
      setofEnumExample:
        description: |
          Contains a Set of `EnumTest`. If `uniqueItems` is `true` for an Array,
          the then instead of "Array of ______", it needs to read "Set of _______".
        type: EnumTest[]
        uniqueItems: true
  EnumWithDescriptionExample:
    description: Enum with agreed upon description annotation.
    type: string
    (enumDescriptions):
      value1: description 1
      value2: description 2
      value3: description 3
    enum:
      - value1
      - value2
      - value3

  # Arrays
  ArrayTestType:
    description: A type containing arrays of different kinds.
    properties:
      arrayOfIntExample:
        description: A property with an array of ints. JSON primitive is `array`, display type is "Array of Int".
        type: integer[]
        minItems: 1
        uniqueItems: false
      arrayOfUniqueIntExample:
        description: A property with an array of ints in which items must be unique. JSON primitive is `array`, display type is "Array of Int"
        type: integer[]
        minItems: 1
        uniqueItems: true
      arrayOfTwonumbersExample:
        type: integer[]
        minItems: 2
        maxItems: 2
      arrayOfFloatExample:
        description: An array of float. JSON primitive is `array`, display type is "Array of Float". !!! Until underlying libraries are fixed, this displays "Array of Number" because the pattern information is lost.
        type: array
        items:
          type: number
          format: "float"
        minItems: 1
        maxItems: 1
        uniqueItems: false
      arrayOfNumberNoDefaultsExample:
        description: An array of float. JSON primitive is `array`, display type is "Array of Number"
        type: number[]
      arrayOfStringExample:
        description: An array of strings. JSON primitive is `array`, display type is "Array of String"
        type: string[]
        uniqueItems: false
      arrayOfObjectType:
        description: An array of IntegerTestType. JSON primitive is `array`, display type is "Array of IntegerTestType"
        type: IntegerTestType[]
        uniqueItems: false

  # Not supporting actual RAML Union types, only a pattern that has a parent without own properties except the discriminator
  UnionLikeType:
    description: |
      A pattern of inheritance that is to be represented like a union, i.e. this parent type would not be shown with a property list on its own.
    type: object
    discriminator: kind
    properties:
      kind: string
  UnionLikeSubType1:
    description: This specific instance of the union is rendered like a regular type with a property table
    type: UnionLikeType
    discriminatorValue: subtype1
    properties:
      foo: string
      name: string
  UnionLikeSubType2:
    description: This specific instance of the union is rendered like a regular type with a property table
    type: UnionLikeType
    discriminatorValue: subtype2
    properties:
      bar: string
      name: string

  # Making constant values explicit is more usable so we render this pattern differnt than a regular Enum:
  ConstantLikeType:
    type: string
    description: render an enum with one value as a constant.
    enum: [constantExampleValue]

  # Tests "optional"/required fields
  OptionalPropertyTestType:
    description: Example of optional/non-optional properties.
    properties:
      requiredTrueExample:
        type: string
        description: this should be required.
        required: true
      requiredNotSetExample:
        type: string
        description: this should default to required = true.
      requiredFalseExample:
        type: string
        required: false

  OutOfOrderPropertiesTestType:
    description: |
      Tests out of order properties. By convention, `id`, `key`, `version`, `createdAt`,
      `createdBy`, `lastModifiedAt` and `lastModifiedBy` should display at the top (in that order).
      `custom` should display at the bottom. All other properties should render in the order they
      appear.
      Some types will not have all of the 'conventional' properties – i.e. cart doesn't have a key field.
      In this case, ordering would go `id`, `version`... etc.
    properties:
      eigthProperty:
        type: string
        description: Should display 8th (1st in RAML)
      createdBy:
        type: object
        (beta): true
        description: Should display 5th (2nd in RAML)
      ninthProperty:
        type: string
        description: Should display 9th (3rd in RAML)
      key:
        type: string
        description: Should display 2nd (4th in RAML)
      tenthProperty:
        type: string
        description: Should display 10th (5th in RAML)
      custom:
        type: string
        description: Should display last (6th in RAML)
      eleventhPropery:
        type: string
        description: Should display 11th (7th in RAML)
      id:
        type: string
        description: Should display 1st (8th in RAML)
      twelthProperty:
        type: string
        description: Should display 12th (9th in RAML)
      lastModifiedBy:
        type: object
        (beta): true
        description: Should display 7th (10th in RAML)
      thirteenthProperty:
        type: string
        description: Should display 13th (11th in RAML)
      lastModifiedAt:
        type: datetime
        description: Should display 6th (12th in RAML)
      fourteenthProperty:
        type: string
        description: Should display 14th (13th in RAML)
      fifteenthProperty:
        type: string
        description: Should display 15th (14th in definition)
      createdAt:
        type: datetime
        description: Should display 4th (15th in RAML)


  # References
  ExampleTargetType:
    description: empty target object type, just here to be able to point to it.

  ReferenceTypeId:
    description: |
      The allowed typeIds of the referenced resource.
    type: string
    enum:
      - example-target
      - cart-discount
      - category
      - channel
      - customer
      - customer-group
      - price
      - product
      - product-type
      - product-variant
      - shipping-method
      - state
      - tax-category
    (enumDescriptions):
      example-target: References an ExampleTargetType.
      cart-discount: References a cart discount.
      category: References a category.
      channel: References a channel.
      customer: References a customer.
      customer-group: References a customer group.
      price: References a price.
      product: References a product.
      product-type: References a product type.
      product-variant: References a product variant.
      shipping-method: References a shipping method.
      state: References a state.
      tax-category: References a tax-category.

  ResourceIdentifier:
    type: object
    discriminator: typeId
    properties:
      typeId:
        type: ReferenceTypeId
        required: false
      id:
        type: string
        required: false
      key:
        type: string
        required: false

  Reference:
    type: object
    discriminator: typeId
    properties:
      typeId:
        type: ReferenceTypeId
      id:
        type: string
      obj:
        type: any
        required: false

  KeyReference:
    type: object
    discriminator: typeId
    properties:
      typeId:
        type: ReferenceTypeId
      key:
        type: string

  ExampleTargetTypeReference:
    type: Reference
    displayName: Reference
    (refersTo): ExampleTargetType
    discriminatorValue: example-target
    properties:
      obj:
        type: IntegerTestType

  ExampleTargetTypeKeyReference:
    type: KeyReference
    displayName: KeyReference
    (refersTo): ExampleTargetType
    discriminatorValue: example-target

  ExampleTargetTypeResourceIdentifier:
    type: ResourceIdentifier
    displayName: ResourceIdentifier
    (refersTo): ExampleTargetType
    discriminatorValue: example-target

  # This pattern is needed for cases like the customerId on the Cart, which is a pointer to another resource, but in plain String id format.
  # The refersTo Annotation allows to also render these kinds of links in a structured way.
  ExampleTargetTypePointer:
    displayName: String
    type: string
    (refersTo): ExampleTargetType

  # References: This is the actual Test Type to be rendered:
  ReferencesTestType:
    description: Example for various sorts of References
    properties:
      exampleTargetId:
        type: ExampleTargetTypePointer
        description: |
          A kind of reference that is not an object but directly the ID.
          To be rendered as "String, refers to ExampleTargetType"
          with "ExampleTargetType" being a link.
      exampleTarget:
        type: ExampleTargetTypeReference
        description: |
          Type should be rendered as "Reference, refers to ExampleTargetType"
          with "Reference" and the "ExampleTargetType" being links.
      exampleTargets:
        type: ExampleTargetTypeReference[]
        description: |
          Type should be rendered as "Array of References, refers to ExampleTargetType"
          with "References" and "ExampleTargetType" being links.
      exampleTargetIdentifier:
        type: ExampleTargetTypeResourceIdentifier
        description: |
          Type should be rendered as "ResourceIdentifier, refers to ExampleTargetType"
          with "ResourceIdentifier" and "ExampleTargetType" being links.
      exampleTargetIdentifiers:
        type: ExampleTargetTypeResourceIdentifier[]
        description: |
          Type should be rendered as "Array of ResourceIdentifiers, refers to ExampleTargetType"
          with "ResourceIdentifiers" and "ExampleTargetType" being links.
      exampleTargetByKey:
        type: ExampleTargetTypeKeyReference
        description: |
          Type should be rendered as "KeyReference, refers to ExampleTargetType"
          with "KeyReference" and "ExampleTargetType" being links.
      exampleTargetsByKey:
        type: ExampleTargetTypeKeyReference[]
        description: |
          Type should be rendered as "Array of KeyReferences, refers to ExampleTargetType"
          with "KeyReferences" and "ExampleTargetType" being links.


  # Annotations
  AnnotationsTestType:
    properties:
      isBetaType:
        description: Beta property. If true, a "beta" flag should appear beside the type name.
        type: string
        (beta): true
      isDeprecatedType:
        description: Deprecated property. THIS MUST NOT BE RENDERED AT ALL (=hidden in documentation, it just stays there to keep SDKs backwards compatible).
        type: string
        (deprecated): true

  # Examples
  ExamplesTestType:
    properties:
      foo:
        type: string
      baz:
        type: integer
      boo:
        type: boolean
    examples:
      simpleExample: !include examples/example.json
      fullExample:
        displayName: Full Example
        description: |
          This **markdown** formatted description of the code example is to be shown with it.
          The title of this example must be "Full Example" (displayName overrides the name).
          The JSON contained must be code highlighted because the mime type is set.
        value: !include examples/example.json
      fullExampleWithLoosenedStrict:
        displayName: Full Example with default strict setting
        description: |
          "strict" defaults to true, this is set to false and the example is wrong so it should parse
        value: !include examples/example-nonconforming.json
        strict: false
      fullExampleInRamlNotation:
        displayName: Example in RAML notation
        description: |
          We're not typically doing this but it should not fail. It places an object in RAML/YAML notation
          in the tree. The parser's default output serializes it to JSON, which is another pointer that JSON _is_ the
          default assumption.
        value:
          foo: bar
          baz: 100
          boo: false
        strict: true

  SingleExampleTestType:
    example: !include examples/example.json

  SingleFullExampleTestType:
    example:
      displayName: Full Example
      description: |
        This **markdown** formatted description of the code example is to be shown with it.
        The title of this example must be "Full Example" (displayName overrides the name).
        The JSON contained must be code highlighted because the mime type is set.
      value: !include examples/example.json
      strict: false


  # Update / Update Actions related.
  # The actual Update Action Types are postfixed with "OnFooBar" to namespace them across endpoints.
  # All Update Actions for a given resource must inherit from a given parent type.
  # The parent type must not inherit from further levels of abstract types.
  # The Update Actions are modeled as a Union-Like pattern (see above)
  ExampleResourceUpdate:
    properties:
      version:
        type: number
        description: |
          The expected version of the ExampleResource on which the changes should be applied.
          If the expected version does not match the actual version, a 409 Conflict will be returned.
      actions:
        type: array
        items: ExampleResourceUpdateAction
        description: |
          The list of update actions to be performed on the ExampleResource.
          Actions are applied in the given order.

  ExampleResourceUpdateAction:
    discriminator: action
    properties:
        action:
          type: string

  DoSomeThingOnExampleResource:
    displayName: Do SomeThing
    type: ExampleResourceUpdateAction
    discriminatorValue: doSomeThing

  ChangeSomePropertyOnExampleResource:
    type: ExampleResourceUpdateAction
    displayName: Change SomeProperty
    discriminatorValue: changeSomeProperty
    properties:
      someProperty:
        type: string

  ImportFooForSecondPropertyToUpdateOnExampleResource:
    type: ExampleResourceUpdateAction
    description: Another Update action for ExampleResource that needs crazy long name
    displayName: Import Foo for SecondPropertyToUpdate
    discriminatorValue: importFooForSecondPropertyToUpdate
    properties:
      secondPropertyToUpdate:
        type: string

annotationTypes:
  enumDescriptions:
    description: |
      Describes the values of an enum type.
    type: object
    properties:
      //:
        description: |
          Adds a description for the enum value given by the key.
  beta:
    description: |
      if true, designates that the element is not released yet like regular elements and should be treated as being subject to
      changes, incompleteness and ongoing development.
      Documentation must provide a hint that the element is in beta status and can opt to hide such elements.
      If not set, false must be assumed.
    type: boolean
  deprecated:
    description: |
      If true, designates that the element carrying this annotation should not be used any more and is subject to potential later removal.
      If used, the description text should explain the new way the effect of the deprecated element is to be achieved.
      If not set, false must be assumed.
      Documentation can choose to hide deprecated elements, mark them deprecated or make them less prominent as needed.
      Documentation must not suppress the fact that an element is deprecated.
    type: boolean
  refersTo:
    description: |
      Must contain either a type name in the current API or a detectable addressing scheme like URN or URL pointing to other entities.
      if the `refersTo` annotation is used on a RAML element it designates that the element is referring, linking or pointing to another type of entity.
      Documentation should generate a navigatable link to that other entity.
    type: string


## Reminder for future needs:
#  messagesEmitted:
#    description: |
#      list of messages emitted by an endpoint (Strings?)
#    type: String[]

# Endpoints ("Resources" in RAML and HTTP terminology)
# Every CT API endpoint starts at this root
/{projectKey}:
  uriParameters:
    projectKey:
      description: The CTP project key.
      type: string
  /resource:
    post:
      displayName: Create a Resource
      description: Create (POST) operation to a resource.
      securedBy:
        - oauth_2_0:
            scopes: ["manage_test:{projectKey}"]
      body:
        type: ObjectTestTypeDraft
      responses:
        201:
          description: 201 Created response. This is the success response when creating something.
          body:
            type: ObjectTestType
    get:
      displayName: Get all resources
      description: Query/retrieve (GET) a specific resource or resource(s). This should return a paged query result of _blah_.
      queryParameters:
        where:
          type: string
          required: false
        sort:
          type: string
          required: false
        expand:
          type: string
          required: false
        limit:
          type: number
          required: false
        offset:
          type: number
          required: false
      securedBy:
      - oauth_2_0:
          scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]
      responses:
          200:
            description: A 200 response.  This is the case when reading or modifying something.
            body:
              type: ArrayTestType
    /{id}:
      post:
        displayName: Update a Resource by ID
        description: Update a resource by ID
        body:
          type: ExampleResourceUpdate
      get:
        displayName: Get a Resource by its ID
        description: Query by ID
        securedBy:
          - oauth_2_0:
              scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]
        queryParameters:
          optionalQueryParameter:
            required: false
            type: string
            description: |
              This is a query parameter.
          secondOptionalQueryParameter:
            required: false
            type: string
            description: |
              This is another query parameter.
        responses:
          200:
            body:
              type: ObjectTestType
      delete:
        displayName: Delete a Resource by its ID
        description: Deletes a resource.
        securedBy:
          - oauth_2_0:
              scopes: ["manage_test:{projectKey}"]
        responses:
          200:
            description: Deletion was successful.
            body:
              type: ObjectTestType
    /key={key}:
      get:
        displayName: Get a Resource by its Key
        description: Query by key. Has three responses to see the difference between modeling patterns in RAML
        securedBy: [oauth_2_0: {scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]}]
        responses:
          200:
            description: this is directly using a named type without messing with it, thats how we want to use RAML
            body:
              type: ObjectTestType
          502:
            body:
              type: StringTestType

    /artificially-complex/path/uri-parameter-one={uriParameterOne}/{uriParameterTwo}:
      description: Artificial Endpoint constructing a high complexity of what could theoretically come together in one API
      (beta): true
      uriParameters:
        uriParameterOne:
          type: string
          description: A Path parameter in the equal-sign-pseudo-query notation
        uriParameterTwo:
          type: string
          description: A Path parameter as a plain variable path element
      post:
        description: Updates the resource. OutOfOrderPropertiesTestType is used because it is big and long.
        queryParameters:
          queryParameterOne:
            type: number
            description: some parameter to construct a combination of URI and query params
            required: false
          queryParameterTwo:
            type: string
            required: false
        body:
          type: OutOfOrderPropertiesTestType
        responses:
          200:
            description: ArrayTestType is used because it is big and long.
            body:
              type: ArrayTestType
          202:
            description: |
              DateTestType is used because it is big and long
              This is not used by commercetools but a valid 2xx response that says that it will process the stuff later.
              It's here to check how we handle multiple "OK" style response options.
            body:
              type: DateTestType


    /searchApiPattern:
      get:
        displayName: Search Resources
        description: Search all resources by specific parameters.
        securedBy:
          - oauth_2_0:
              scopes: ["manage_test:{projectKey}", "view_test:{projectKey}"]
        queryParameters:
          fuzzy?:
            type: boolean
            description: Whether to apply fuzzy search on the text to analyze.
          fuzzyLevel?:
            type: number
            description: |
              Provide explicitly the fuzzy level desired if fuzzy is enabled. This value can not be higher than the one
              chosen by the platform by default.
          staged?:
            type: boolean
            description: Whether to query for the current or staged projections.
          filter?:
            type: string
          filter.facets?:
            type: string
          filter.query?:
            type: string
          facet?:
            type: string
          /text\.[a-z]{2}(-[A-Z]{2})?/:
            type: string
            required: false


#   /resourceWithHeaders:
#    description: Tests use of specific headers.
